// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  fullName String
  email    String
  password String
  phone    String @unique

  role         UserRole          @default(USER)
  orders       Order[]
  cartItems    CartItem[]
  cart         Cart?
  verification VerificationCode?

  phoneVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Product {
  id       Int     @id @default(autoincrement())
  name     String
  imageUrl String
  active   Boolean @default(false)

  pizzas      Pizza[]
  ingredients Ingredient[]
  items       ProductItem[]

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?
}

model ProductItem {
  id        Int  @id @default(autoincrement())
  price     Int
  pizzaType Int?
  size      Int?

  products  Product  @relation(fields: [productId], references: [id])
  productId Int
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  CartItem CartItem[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
}

model Pizza {
  id Int @id @default(autoincrement())

  price    Int
  size     Int
  type     Int
  carbs    Int
  fats     Int
  kcal     Int
  proteins Int
  weight   Int

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  active    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ingredient {
  id       Int    @id @default(autoincrement())
  name     String
  price    Int
  imageUrl String

  products  Product[]
  cartItems CartItem[]

  createdAt DateTime @default(now())
}

model Cart {
  id Int @id @default(autoincrement())

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  token       String
  totalAmount Int    @default(0)

  items  CartItem[]
  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id Int @id @default(autoincrement())

  cart   Cart @relation(fields: [cartId], references: [id])
  cartId Int

  productItem   ProductItem @relation(fields: [productItemId], references: [id])
  productItemId Int

  quantity Int

  ingredients Ingredient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}

model Order {
  id Int @id @default(autoincrement())

  userId Int
  user   User @relation(fields: [userId], references: [id])

  cartId Int
  cart   Cart @relation(fields: [cartId], references: [id])

  status      OrderStatus @default(PENDING)
  totalAmount Int
  paymentId   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationCode {
  id Int @id @default(autoincrement())

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  code String

  expiresAt DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, code])
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}
